{
  "version": 3,
  "file": "ngx-fire-uploader-core.umd.min.js",
  "sources": [
    "ng://@ngx-fire-uploader/core/node_modules/tslib/tslib.es6.js",
    "ng://@ngx-fire-uploader/core/out/fire-uploader.token.ts",
    "ng://@ngx-fire-uploader/core/out/fire-uploader.ts",
    "ng://@ngx-fire-uploader/core/out/utils.ts",
    "ng://@ngx-fire-uploader/core/out/file-item.class.ts",
    "ng://@ngx-fire-uploader/core/out/fire-uploader.component.ts",
    "ng://@ngx-fire-uploader/core/out/drop-zone.directive.ts",
    "ng://@ngx-fire-uploader/core/out/fire-uploader.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { FireUploaderConfig } from './fire-uploader.model';\r\n\r\nexport const UPLOADER_CONFIG = new InjectionToken<FireUploaderConfig>('config');\r\n",
    "import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { FireUploaderConfig } from './fire-uploader.model';\r\nimport { UPLOADER_CONFIG } from './fire-uploader.token';\r\n\r\nconst defaultConfig: FireUploaderConfig = {\r\n  dropZone: true,\r\n  paramName: null,\r\n  uniqueName: true,\r\n  placeholder: 'Drop files here or click to select',\r\n  multiple: true,\r\n  accept: null,\r\n  parallelUploads: 1,\r\n  maxFiles: 20,\r\n  autoStart: false,\r\n  thumbs: true,\r\n  thumbMethod: 'contain',\r\n  thumbWidth: 100,\r\n  thumbHeight: 100,\r\n  resizeMethod: 'crop',\r\n  resizeWidth: null,\r\n  resizeHeight: null,\r\n  resizeMimeType: null,\r\n  resizeQuality: 1\r\n};\r\n\r\n@Injectable()\r\nexport class FireUploader {\r\n\r\n  /** Global config */\r\n  config: FireUploaderConfig;\r\n\r\n  constructor(@Optional() @Inject(UPLOADER_CONFIG) config: FireUploaderConfig) {\r\n    this.config = {...defaultConfig, ...config};\r\n  }\r\n\r\n}\r\n",
    "import { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { FileItem } from './file-item.class';\r\nimport { from } from 'rxjs/observable/from';\r\nimport { of } from 'rxjs/observable/of';\r\n\r\nexport function resizeImage(file: File,\r\n                            maxWidth: number,\r\n                            maxHeight: number,\r\n                            method: 'crop' | 'contain',\r\n                            quality: number): Observable<Blob> {\r\n\r\n  // Check if maxWidth or maxHeight is null\r\n  if (!maxHeight) {\r\n    maxHeight = maxWidth;\r\n  } else if (!maxWidth) {\r\n    maxWidth = maxHeight;\r\n  }\r\n\r\n  return fromPromise(\r\n    new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.src = URL.createObjectURL(file);\r\n      image.onload = () => {\r\n        const width = image.width;\r\n        const height = image.height;\r\n\r\n        if (width <= maxWidth && height <= maxHeight) {\r\n          resolve(file);\r\n        }\r\n\r\n        let newWidth;\r\n        let newHeight;\r\n\r\n        switch (method) {\r\n          case 'contain':\r\n            if (width > height) {\r\n              newHeight = maxHeight;\r\n              newWidth = width * (maxHeight / height);\r\n            } else {\r\n              newWidth = maxWidth;\r\n              newHeight = height * (maxWidth / width);\r\n            }\r\n            break;\r\n          case 'crop':\r\n            if (width > height) {\r\n              newHeight = height * (maxWidth / width);\r\n              newWidth = maxWidth;\r\n            } else {\r\n              newWidth = width * (maxHeight / height);\r\n              newHeight = maxHeight;\r\n            }\r\n            break;\r\n        }\r\n\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = newWidth;\r\n        canvas.height = newHeight;\r\n\r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0, newWidth, newHeight);\r\n\r\n        if (typeof canvas.toBlob === 'function') {\r\n          canvas.toBlob(resolve, file.type, quality);\r\n        } else {\r\n          resolve(canvas.msToBlob());\r\n        }\r\n      };\r\n      image.onerror = reject;\r\n    })\r\n  );\r\n}\r\n\r\nfunction dataURItoBlob(dataURI) {\r\n  // convert base64 to raw binary data held in a string\r\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\r\n  const byteString = atob(dataURI.split(',')[1]);\r\n\r\n  // separate out the mime component\r\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n  // write the bytes of the string to an ArrayBuffer\r\n  const ab = new ArrayBuffer(byteString.length);\r\n\r\n  // create a view into the buffer\r\n  const ia = new Uint8Array(ab);\r\n\r\n  // set the bytes of the buffer to the correct values\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  // write the ArrayBuffer to a blob, and you're done\r\n  const blob = new Blob([ab], {type: mimeString});\r\n  return blob;\r\n\r\n}\r\n\r\nexport function convertToMB(size: number) {\r\n  return size / 1024 / 1024;\r\n}\r\n\r\n/**\r\n * Splice files array into chunks for parallel upload\r\n */\r\nexport function parallizeUploads(files: FileItem[], parallelUploads: number) {\r\n  const arr = [];\r\n  let i, j;\r\n  for (i = 0, j = files.length; i < j; i += parallelUploads) {\r\n    arr.push(files.slice(i, i + parallelUploads));\r\n  }\r\n  return from(arr);\r\n}\r\n\r\n\r\n/**\r\n * Resize images if needed\r\n */\r\nexport function processFile(item: FileItem, width: number, height: number, method: 'crop' | 'contain', quality: number) {\r\n  return (width || height) ?\r\n    resizeImage(item.file, width, height, method, quality) :\r\n    of(item);\r\n}\r\n\r\n/**\r\n * Uploader errors\r\n */\r\nexport const maxFilesError = (maxFiles: number) => {\r\n  return {\r\n    type: 'uploader/count_limit_exceeded',\r\n    message: `Max files has exceeded, Only ${maxFiles} is accepted.`\r\n  };\r\n};\r\n\r\nexport const maxFileSizeError = (fileName: string) => {\r\n  return {\r\n    type: 'uploader/size_limit_exceeded',\r\n    message: `${fileName} has exceeded the max size allowed.`\r\n  };\r\n};\r\n\r\nexport const isImage = (file: File) => {\r\n  return file.type.split('/')[0] === 'image';\r\n};\r\n",
    "import { AngularFireUploadTask } from 'angularfire2/storage';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { isImage, resizeImage } from './utils';\r\nimport { FileSnapshot } from './fire-uploader.model';\r\nimport { FireUploaderComponent } from './fire-uploader.component';\r\n\r\nexport class FileItem {\r\n\r\n  private _task: AngularFireUploadTask;\r\n\r\n  snapshot: FileSnapshot;\r\n  snapshot$ = new BehaviorSubject<FileSnapshot>({});\r\n\r\n  constructor(public file: File, private _uploader: FireUploaderComponent) {\r\n\r\n    this.updateSnapshot({\r\n      name: file.name,\r\n      type: file.type,\r\n      active: false,\r\n      extension: file.name.split('.').pop(),\r\n      progress: {\r\n        percentage: 0,\r\n        bytesTransferred: 0,\r\n        totalBytes: file.size\r\n      }\r\n    });\r\n\r\n    /** If file is type of image, create a thumbnail */\r\n    if (this._uploader.thumbs && isImage(file)) {\r\n\r\n      resizeImage(file, this._uploader.thumbWidth, this._uploader.thumbHeight, this._uploader.thumbnailMethod, 1)\r\n        .subscribe(\r\n          (blob: Blob) => this.updateSnapshot({thumbnail: URL.createObjectURL(blob)}),\r\n          (err: Error) => this._uploader.errorEmitter.emit(err)\r\n        );\r\n    }\r\n  }\r\n\r\n  assignTask(task: AngularFireUploadTask): Promise<any> {\r\n    this._task = task;\r\n\r\n    this._task.snapshotChanges()\r\n      .subscribe((snapshot: any) => this.onSnapshotChanges(snapshot));\r\n\r\n    return this._task\r\n      .then((snapshot: any) => this.onTaskComplete(snapshot))\r\n      .catch((err: Error) => {\r\n        this.updateSnapshot({active: false});\r\n        this._uploader.errorEmitter.emit(err);\r\n      });\r\n  }\r\n\r\n  delete() {\r\n    this.snapshot.ref.delete()\r\n      .then(() => {\r\n        this._uploader.removeEmitter.emit(this);\r\n        this.cancel();\r\n      })\r\n      .catch((err) => this._uploader.errorEmitter.emit(err));\r\n  }\r\n\r\n  pause() {\r\n    if (this._task) {\r\n      this._task.pause();\r\n    }\r\n  }\r\n\r\n  resume() {\r\n    if (this._task) {\r\n      this._task.resume();\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this._task) {\r\n      this._task.cancel();\r\n    }\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.updateSnapshot({\r\n      state: null,\r\n      active: false,\r\n      downloadURL: null,\r\n      progress: {\r\n        percentage: 0,\r\n        bytesTransferred: 0,\r\n        totalBytes: this.file.size\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateSnapshot(snapshot: FileSnapshot) {\r\n    this.snapshot = {...this.snapshot, ...snapshot};\r\n    this.snapshot$.next(this.snapshot);\r\n  }\r\n\r\n  private onSnapshotChanges(snapshot: any) {\r\n    this.updateSnapshot({\r\n      active: snapshot.state === 'running',\r\n      state: snapshot.state,\r\n      progress: {\r\n        percentage: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\r\n        bytesTransferred: snapshot.bytesTransferred,\r\n        totalBytes: snapshot.totalBytes\r\n      }\r\n    });\r\n    this._uploader.updateRootState$.next(null);\r\n  }\r\n\r\n  private onTaskComplete(snapshot: any) {\r\n    if (snapshot.downloadURL) {\r\n      this.updateSnapshot({\r\n        downloadURL: snapshot.downloadURL,\r\n        ref: snapshot.ref,\r\n        active: false,\r\n        state: snapshot.state,\r\n        progress: {\r\n          percentage: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\r\n          bytesTransferred: snapshot.bytesTransferred,\r\n          totalBytes: snapshot.totalBytes\r\n        }\r\n      });\r\n      this._uploader.successEmitter.emit(this);\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { AngularFireStorage } from 'angularfire2/storage';\n\nimport { UploaderState, UploaderProgress } from './fire-uploader.model';\nimport { FireUploader } from './fire-uploader';\nimport { FileItem } from './file-item.class';\nimport { convertToMB, maxFilesError, maxFileSizeError, parallizeUploads, processFile } from './utils';\n\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { combineAll } from 'rxjs/operators/combineAll';\nimport { concatMap } from 'rxjs/operators/concatMap';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { finalize } from 'rxjs/operators/finalize';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\nimport { from } from 'rxjs/observable/from';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\n\n@Component({\n  selector: 'fire-uploader',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<ng-container *ngIf=\"state$ | async; let state\">\r\n  <input #fileInput type=\"file\"\r\n         [accept]=\"accept\"\r\n         [multiple]=\"multiple\"\r\n         (click)=\"fileInput.value=null\"\r\n         (change)=\"addFiles(fileInput.files)\">\r\n  <div *ngIf=\"dropZone\"\r\n       class=\"dropzone\"\r\n       (dropZone)=\"addFiles($event)\"\r\n       (click)=\"fileInput.click()\"\r\n       (dragOver)=\"hoverClass=$event\">\r\n    <div class=\"dropzone-placeholder\"\r\n         *ngIf=\"!state.files.length || !content.children.length\">\r\n      {{ placeholder }}\r\n    </div>\r\n    <div class=\"overlay-layer\"></div>\r\n    <div class=\"uploader-content\" #content>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n`\n})\nexport class FireUploaderComponent implements OnInit, OnDestroy {\n\n  private _initialState: UploaderState = {\n    files: [],\n    active: false,\n    progress: {\n      totalBytes: 0,\n      bytesTransferred: 0,\n      percentage: 0\n    }\n  };\n  private _state: UploaderState = this._initialState;\n  state$ = new BehaviorSubject<UploaderState>(this._initialState);\n\n  updateRootState$ = new BehaviorSubject<UploaderState>({});\n\n  private _cancelUpload$ = new Subject();\n\n  // Shows the drop zone\n  @Input() dropZone: boolean = this._manager.config.dropZone;\n\n  // If null, original file name will be used.\n  @Input() paramName: string = this._manager.config.paramName;\n\n  // Use date.now to create a unique name for uploaded file\n  @Input() uniqueName: boolean = this._manager.config.uniqueName;\n\n  // Drop zone placeholder\n  @Input() placeholder: string = this._manager.config.placeholder;\n\n  // Enables multiple file select\n  @Input() multiple: boolean = this._manager.config.multiple;\n\n  // The accepted extensions by the uploader\n  @Input() accept: string = this._manager.config.accept;\n\n  // Maximum number of files uploading at a time\n  @Input() parallelUploads: number = this._manager.config.parallelUploads;\n\n  // Maximum number of files to be uploaded\n  @Input() maxFiles: number = this._manager.config.maxFiles;\n\n  // Maximum file size\n  @Input() maxFileSize: number = this._manager.config.maxFileSize;\n\n  // Starts uploading when files are added\n  @Input() autoStart: boolean = this._manager.config.autoStart;\n\n  // Whether thumbnails for images should be generated\n  @Input() thumbs: boolean = this._manager.config.thumbs;\n\n  // How the images should be scaled down in case both, width and height are provided. Can be either contain or crop.\n  @Input() thumbnailMethod: 'crop' | 'contain' = this._manager.config.thumbMethod;\n  @Input() resizeMethod: 'crop' | 'contain' = this._manager.config.resizeMethod;\n\n  // If set, images will be resized to these dimensions before being uploaded. If only one, resizeWidth or resizeHeight is provided,\n  // the original aspect ratio of the file will be preserved.\n  @Input() resizeWidth: number = this._manager.config.resizeWidth;\n  @Input() resizeHeight: number = this._manager.config.resizeHeight;\n\n  @Input() resizeQuality: number = this._manager.config.resizeQuality;\n\n  // If null, the ratio of the image will be used to calculate it.\n  @Input() thumbWidth: number = this._manager.config.thumbWidth;\n  @Input() thumbHeight: number = this._manager.config.thumbHeight;\n\n  // The mime type of the resized image (before it gets uploaded to the server). If null the original mime type will be used. To force jpeg,\n  // for example, use image/jpeg.\n  @Input() resizeMimeType: string = this._manager.config.resizeMimeType;\n\n  // Emits when files are changed.\n  @Output('files') filesEmitter = new EventEmitter();\n\n  // Emits when a file is deleted.\n  @Output('remove') removeEmitter = new EventEmitter<FileItem>();\n\n  // The file has been uploaded successfully.\n  @Output('success') successEmitter = new EventEmitter<FileItem>();\n\n  // Emits when the upload was either successful or erroneous.\n  @Output('complete') completeEmitter = new EventEmitter<FileItem[]>();\n\n  // Emits downloadURL array for the successfully uploaded files\n  @Output('value') valueEmitter = new EventEmitter<string[]>();\n\n  // Emits when an error is occurred\n  @Output('error') errorEmitter = new EventEmitter();\n\n  // Emits when active state changes\n  @Output('active') activeEmitter = new EventEmitter<boolean>();\n\n  // Emits the progress %, the totalBytes and the totalBytesSent.\n  @Output('progress') progressEmitter = new EventEmitter<UploaderProgress>();\n\n  // Emits when the uploader is reset\n  @Output('reset') resetEmitter = new EventEmitter();\n\n  @ViewChild('fileInput') fileInput;\n\n  @HostBinding('class.dragover') hoverClass;\n\n  constructor(private _manager: FireUploader, private _storage: AngularFireStorage) {\n  }\n\n  ngOnInit() {\n\n    // Combines queued files states\n    this.updateRootState$.pipe(\n      debounceTime(50),\n      map(() => {\n        if (this._state.files.length) {\n          const rootState = this.combineStates();\n          return {\n            active: rootState.active,\n            progress: {\n              percentage: (rootState.progress.bytesTransferred / rootState.progress.totalBytes) * 100,\n              bytesTransferred: rootState.progress.bytesTransferred,\n              totalBytes: rootState.progress.totalBytes\n            }\n          };\n        }\n        return {\n          active: false,\n          progress: {\n            percentage: 0,\n            bytesTransferred: 0,\n            totalBytes: 0\n          }\n        };\n      }),\n      tap((state: UploaderState) => {\n        this.setState(state);\n        this.progressEmitter.emit(state.progress);\n        this.activeEmitter.emit(state.active);\n      })\n    ).subscribe();\n  }\n\n  ngOnDestroy() {\n    if (this.progressEmitter.observers.length) {\n      this.updateRootState$.complete();\n    }\n  }\n\n  /**\n   * Start uploading\n   */\n  start() {\n    // Start if there are files added and the uploader is not busy\n    if (!this._state.active && this._state.files.length) {\n      from(this._state.files).pipe(\n        map((file: FileItem) =>\n          processFile(file, this.resizeWidth, this.resizeHeight, this.resizeMethod, this.resizeQuality)\n        ),\n        combineAll(),\n        switchMap((files: FileItem[]) =>\n          parallizeUploads(files, this.parallelUploads)\n        ),\n        concatMap((chunk: FileItem[]) =>\n          this.uploadFiles(chunk)\n        ),\n        takeUntil(this._cancelUpload$),\n        finalize(() => {\n          // Emits uploaded files.\n          const uploaded = this._state.files.filter((item: FileItem) => item.snapshot === 'success');\n          this.completeEmitter.emit(uploaded);\n\n          // Emits the URLs of the uploaded files.\n          const downloadURLs = uploaded.map((item: FileItem) => item.snapshot.downloadURL);\n          this.valueEmitter.emit(downloadURLs);\n\n          this.updateRootState$.next(null);\n        })\n      ).subscribe();\n    }\n  }\n\n  select() {\n    this.fileInput.nativeElement.click();\n  }\n\n  /**\n   * Add files to the queue\n   */\n  addFiles(fileList: FileList) {\n    this.validateFiles(fileList)\n      .then((files: FileItem[]) => {\n        this.setState({files});\n        this.filesEmitter.emit(files);\n        this.updateRootState$.next(null);\n\n        // Starts uploading as soon as the file are added\n        if (this.autoStart) {\n          this.start();\n        }\n      });\n  }\n\n  /**\n   * Remove file\n   * cancels the file if it is being uploaded\n   * deletes the file if it has been uploaded\n   */\n  removeFile(item: FileItem) {\n    if (item.snapshot.state === 'success') {\n      item.delete();\n    } else if (item.snapshot.state === 'running') {\n      item.cancel();\n    } else {\n      this.removeEmitter.emit(item);\n    }\n\n    // Destroy file item\n    item.snapshot$.complete();\n    const files = this._state.files.filter((file: FileItem) => file !== item);\n    this.setState({files});\n\n    this.filesEmitter.emit(this._state.files);\n    this.updateRootState$.next(null);\n  }\n\n  /**\n   * Resets the uploader\n   */\n  reset(remove = true) {\n    this.cancel(remove);\n    this.setState({files: []});\n    this.filesEmitter.emit([]);\n    this.updateRootState$.next(null);\n    this.resetEmitter.emit();\n  }\n\n  cancelFile(file: FileItem) {\n    file.cancel();\n    this.updateRootState$.next(null);\n  }\n\n  /**\n   * Cancel all upload tasks\n   */\n  cancel(remove = true) {\n    this._cancelUpload$.next();\n    this._state.files.map((item: FileItem) => {\n      if (remove && item.snapshot.state === 'success') {\n        item.delete();\n      } else {\n        item.cancel();\n      }\n    });\n  }\n\n  /**\n   * Pause all upload tasks\n   */\n  pause() {\n    this._state.files.map((file: FileItem) => file.pause());\n  }\n\n  /**\n   * Resume all paused tasks\n   */\n  resume() {\n    this._state.files.map((file: FileItem) => file.resume());\n  }\n\n  private setState(state: UploaderState) {\n    this._state = {...this._state, ...state};\n    this.state$.next(this._state);\n  }\n\n  /**\n   * Takes files from drop zone or file input\n   * Validates max file count\n   * Validates max file size\n   * Prevents duplication\n   */\n  private validateFiles(fileList: FileList) {\n    return new Promise((resolve, reject) => {\n      let files: FileItem[] = [];\n      if (fileList.length) {\n        let length: number;\n\n        // Validate max files count\n        if (fileList.length > this.maxFiles) {\n          this.errorEmitter.emit(maxFilesError(this.maxFiles));\n          length = this.maxFiles;\n        } else {\n          length = fileList.length;\n        }\n\n        for (let i = 0; i < length; i++) {\n\n          // Validate max file size\n          if (convertToMB(fileList[i].size) > this.maxFileSize) {\n            this.errorEmitter.emit(maxFileSizeError(fileList[i].name));\n          } else {\n            const file = new FileItem(fileList[i], this);\n            files = [...files, file];\n          }\n        }\n        if (this.multiple) {\n          // Combine and filter duplicated files\n          files = [...this._state.files, ...files]\n            .filter((curr, index, self) =>\n              self.findIndex(t => t.file.name === curr.file.name && t.file.size === curr.file.size) === index\n            );\n        }\n        // return files;\n        resolve(files);\n      }\n      // If user didn't select file\n      resolve(this._state.files);\n      // return this._state.files;\n    });\n  }\n\n  /**\n   * Iterates over given files\n   * Generates file name\n   * Starts the uploading task\n   */\n  private uploadFiles(files: FileItem[]) {\n    const chunk = files.map((item: FileItem) => {\n      // Generate file name\n      const path = `${new Date().getTime()}_${this.paramName || item.snapshot.name}`;\n      const task = this._storage.upload(path, item.file);\n      return item.assignTask(task);\n    });\n    return forkJoin(...chunk);\n  }\n\n  /**\n   * Combine the states of all files in a single state\n   */\n  private combineStates() {\n    return this._state.files\n      .map((item: FileItem) => item.snapshot)\n      .reduce((total, state) => ({\n          active: total.active || state.active,\n          progress: {\n            bytesTransferred: total.progress.bytesTransferred + state.progress.bytesTransferred,\n            totalBytes: total.progress.totalBytes + state.progress.totalBytes\n          }\n        })\n      );\n  }\n}\n",
    "import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n  selector: '[dropZone]'\n})\nexport class DropZoneDirective {\n\n  @Output('dropZone') dropZone = new EventEmitter();\n\n  @Output() dragOver = new EventEmitter<boolean>();\n\n  @HostListener('drop', ['$event'])\n  onDrop(e: DragEvent) {\n    e.preventDefault();\n    this.dragOver.emit(false);\n    this.dropZone.emit(e.dataTransfer.files);\n  }\n\n  @HostListener('dragover', ['$event'])\n  onDragOver(e) {\n    e.preventDefault();\n    this.dragOver.emit(true);\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(e) {\n    e.preventDefault();\n    this.dragOver.emit(false);\n  }\n\n}\n",
    "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FireUploaderComponent } from './fire-uploader.component';\nimport { DropZoneDirective } from './drop-zone.directive';\nimport { FireUploader } from './fire-uploader';\nimport { FireUploaderConfig } from './fire-uploader.model';\nimport { UPLOADER_CONFIG } from './fire-uploader.token';\n\nexport function UploaderFactory(config: FireUploaderConfig) {\n  return new FireUploader(config);\n}\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    FireUploaderComponent\n  ],\n  declarations: [\n    FireUploaderComponent,\n    DropZoneDirective\n  ]\n})\nexport class FireUploaderModule {\n  static forRoot(config?: FireUploaderConfig): ModuleWithProviders {\n    return {\n      ngModule: FireUploaderModule,\n      providers: [\n        {provide: UPLOADER_CONFIG, useValue: config},\n        {\n          provide: FireUploader,\n          useFactory: UploaderFactory,\n          deps: [UPLOADER_CONFIG]\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "__spread",
    "arguments",
    "length",
    "concat",
    "UPLOADER_CONFIG",
    "InjectionToken",
    "defaultConfig",
    "dropZone",
    "paramName",
    "uniqueName",
    "placeholder",
    "multiple",
    "accept",
    "parallelUploads",
    "maxFiles",
    "autoStart",
    "thumbs",
    "thumbMethod",
    "thumbWidth",
    "thumbHeight",
    "resizeMethod",
    "resizeWidth",
    "resizeHeight",
    "resizeMimeType",
    "resizeQuality",
    "FireUploader",
    "config",
    "this",
    "Object",
    "assign",
    "resizeImage",
    "file",
    "maxWidth",
    "maxHeight",
    "method",
    "quality",
    "fromPromise",
    "Promise",
    "resolve",
    "reject",
    "image",
    "Image",
    "src",
    "URL",
    "createObjectURL",
    "onload",
    "newWidth",
    "newHeight",
    "width",
    "height",
    "canvas",
    "document",
    "createElement",
    "getContext",
    "drawImage",
    "toBlob",
    "type",
    "msToBlob",
    "onerror",
    "Injectable",
    "undefined",
    "decorators",
    "Optional",
    "Inject",
    "args",
    "isImage",
    "split",
    "FileItem",
    "_uploader",
    "_this",
    "snapshot$",
    "BehaviorSubject",
    "updateSnapshot",
    "name",
    "active",
    "extension",
    "pop",
    "progress",
    "percentage",
    "bytesTransferred",
    "totalBytes",
    "size",
    "thumbnailMethod",
    "subscribe",
    "blob",
    "thumbnail",
    "err",
    "errorEmitter",
    "emit",
    "prototype",
    "assignTask",
    "task",
    "_task",
    "snapshotChanges",
    "snapshot",
    "onSnapshotChanges",
    "then",
    "onTaskComplete",
    "catch",
    "delete",
    "ref",
    "removeEmitter",
    "cancel",
    "pause",
    "resume",
    "reset",
    "state",
    "downloadURL",
    "updateRootState$",
    "successEmitter",
    "FireUploaderComponent",
    "_manager",
    "_storage",
    "_initialState",
    "files",
    "_state",
    "state$",
    "_cancelUpload$",
    "Subject",
    "maxFileSize",
    "filesEmitter",
    "EventEmitter",
    "completeEmitter",
    "valueEmitter",
    "activeEmitter",
    "progressEmitter",
    "resetEmitter",
    "ngOnInit",
    "pipe",
    "debounceTime",
    "map",
    "rootState",
    "combineStates",
    "tap",
    "setState",
    "ngOnDestroy",
    "observers",
    "complete",
    "start",
    "from",
    "item",
    "of",
    "combineAll",
    "switchMap",
    "j",
    "arr",
    "slice",
    "parallizeUploads",
    "concatMap",
    "chunk",
    "uploadFiles",
    "takeUntil",
    "finalize",
    "uploaded",
    "filter",
    "downloadURLs",
    "select",
    "fileInput",
    "nativeElement",
    "click",
    "addFiles",
    "fileList",
    "validateFiles",
    "removeFile",
    "remove",
    "cancelFile",
    "message",
    "tslib_1.__spread",
    "curr",
    "index",
    "self",
    "findIndex",
    "t",
    "path",
    "Date",
    "getTime",
    "upload",
    "forkJoin",
    "apply",
    "reduce",
    "total",
    "Component",
    "selector",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "template",
    "AngularFireStorage",
    "Input",
    "Output",
    "ViewChild",
    "hoverClass",
    "HostBinding",
    "DropZoneDirective",
    "dragOver",
    "onDrop",
    "preventDefault",
    "dataTransfer",
    "onDragOver",
    "onDragLeave",
    "UploaderFactory",
    "Directive",
    "HostListener",
    "FireUploaderModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "useFactory",
    "deps",
    "NgModule",
    "imports",
    "CommonModule",
    "exports",
    "declarations"
  ],
  "mappings": "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"
}
